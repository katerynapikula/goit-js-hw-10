{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from \"flatpickr\";\nimport iziToast from \"izitoast\";\nimport \"flatpickr/dist/flatpickr.min.css\";\nimport \"izitoast/dist/css/iziToast.min.css\";\n\nconst dateTimePicker = document.getElementById(\"datetime-picker\");\nconst startBtn = document.getElementById(\"start-btn\");\nconst daysElem = document.getElementById(\"days\");\nconst hoursElem = document.getElementById(\"hours\");\nconst minutesElem = document.getElementById(\"minutes\");\nconst secondsElem = document.getElementById(\"seconds\");\n\n\nlet userSelectedDate = null;\nlet timerInterval; \n\n\nflatpickr(dateTimePicker, {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    const selectedDate = selectedDates[0];\n    if (selectedDate < new Date()) {\n      iziToast.error({\n        title: \"Error\",\n        message: \"Please choose a date in the future\"\n      });\n      startBtn.disabled = true;\n    } else {\n      startBtn.disabled = false;\n      userSelectedDate = selectedDate;\n    }\n  }\n});\n\nfunction addLeadingZero(value) {\n  return String(value).padStart(2, \"0\");\n}\n\nfunction updateTimer() {\n  const difference = userSelectedDate - new Date();\n  if (difference <= 0) {\n    clearInterval(timerInterval);\n    daysElem.textContent = \"00\";\n    hoursElem.textContent = \"00\";\n    minutesElem.textContent = \"00\";\n    secondsElem.textContent = \"00\";\n    return;\n  }\n\n  const { days, hours, minutes, seconds } = convertMs(difference);\n  daysElem.textContent = addLeadingZero(days);\n  hoursElem.textContent = addLeadingZero(hours);\n  minutesElem.textContent = addLeadingZero(minutes);\n  secondsElem.textContent = addLeadingZero(seconds);\n}\n\n\nfunction convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  const days = Math.floor(ms / day);\n  const hours = Math.floor((ms % day) / hour);\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\n\nstartBtn.addEventListener(\"click\", () => {\n  startBtn.disabled = true;\n  timerInterval = setInterval(updateTimer, 1000);\n});"],"names":["dateTimePicker","startBtn","daysElem","hoursElem","minutesElem","secondsElem","userSelectedDate","timerInterval","flatpickr","selectedDates","selectedDate","iziToast","addLeadingZero","value","updateTimer","difference","days","hours","minutes","seconds","convertMs","ms"],"mappings":"+IAKA,MAAMA,EAAiB,SAAS,eAAe,iBAAiB,EAC1DC,EAAW,SAAS,eAAe,WAAW,EAC9CC,EAAW,SAAS,eAAe,MAAM,EACzCC,EAAY,SAAS,eAAe,OAAO,EAC3CC,EAAc,SAAS,eAAe,SAAS,EAC/CC,EAAc,SAAS,eAAe,SAAS,EAGrD,IAAIC,EAAmB,KACnBC,EAGJC,EAAUR,EAAgB,CACxB,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQS,EAAe,CACrB,MAAMC,EAAeD,EAAc,CAAC,EAChCC,EAAe,IAAI,MACrBC,EAAS,MAAM,CACb,MAAO,QACP,QAAS,oCACjB,CAAO,EACDV,EAAS,SAAW,KAEpBA,EAAS,SAAW,GACpBK,EAAmBI,EAEtB,CACH,CAAC,EAED,SAASE,EAAeC,EAAO,CAC7B,OAAO,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG,CACtC,CAEA,SAASC,GAAc,CACrB,MAAMC,EAAaT,EAAmB,IAAI,KAC1C,GAAIS,GAAc,EAAG,CACnB,cAAcR,CAAa,EAC3BL,EAAS,YAAc,KACvBC,EAAU,YAAc,KACxBC,EAAY,YAAc,KAC1BC,EAAY,YAAc,KAC1B,MACD,CAED,KAAM,CAAE,KAAAW,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,GAAYC,EAAUL,CAAU,EAC9Db,EAAS,YAAcU,EAAeI,CAAI,EAC1Cb,EAAU,YAAcS,EAAeK,CAAK,EAC5Cb,EAAY,YAAcQ,EAAeM,CAAO,EAChDb,EAAY,YAAcO,EAAeO,CAAO,CAClD,CAGA,SAASC,EAAUC,EAAI,CAMrB,MAAML,EAAO,KAAK,MAAMK,EAAK,KAAG,EAC1BJ,EAAQ,KAAK,MAAOI,EAAK,MAAO,IAAI,EACpCH,EAAU,KAAK,MAAQG,EAAK,MAAO,KAAQ,GAAM,EACjDF,EAAU,KAAK,MAASE,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAL,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAGAlB,EAAS,iBAAiB,QAAS,IAAM,CACvCA,EAAS,SAAW,GACpBM,EAAgB,YAAYO,EAAa,GAAI,CAC/C,CAAC"}